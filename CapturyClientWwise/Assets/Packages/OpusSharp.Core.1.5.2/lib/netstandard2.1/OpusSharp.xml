<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpusSharp</name>
    </assembly>
    <members>
        <member name="T:OpusSharp.Core.OpusErrorCodes">
            <summary>
            Error codes for opus.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.OpusErrorCodes.OPUS_OK">
            <summary>
            No error.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.OpusErrorCodes.OPUS_BAD_ARG">
            <summary>
            One or more invalid/out of range arguments.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.OpusErrorCodes.OPUS_BUFFER_TOO_SMALL">
            <summary>
            Not enough bytes allocated in the buffer.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.OpusErrorCodes.OPUS_INTERNAL_ERROR">
            <summary>
            An internal error was detected.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.OpusErrorCodes.OPUS_INVALID_PACKET">
            <summary>
            The compressed data passed is corrupted.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.OpusErrorCodes.OPUS_UNIMPLEMENTED">
            <summary>
            Invalid/unsupported request number.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.OpusErrorCodes.OPUS_INVALID_STATE">
            <summary>
            An encoder or decoder structure is invalid or already freed.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.OpusErrorCodes.OPUS_ALLOC_FAIL">
            <summary>
            Memory allocation has failed.
            </summary>
        </member>
        <member name="T:OpusSharp.Core.OpusPredefinedValues">
            <summary>
            Pre-defined values for CTL interface.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.OpusPredefinedValues.OPUS_AUTO">
            <summary>
            Auto/default setting.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.OpusPredefinedValues.OPUS_BITRATE_MAX">
            <summary>
            Maximum bitrate.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.OpusPredefinedValues.OPUS_APPLICATION_VOIP">
            <summary>
            Best for most VoIP/Video Conference applications where listening quality and intelligibility matter most.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.OpusPredefinedValues.OPUS_APPLICATION_AUDIO">
            <summary>
            Best for broadcast/high-fidelity application where the decoded audio should be as close as possible to the input.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.OpusPredefinedValues.OPUS_APPLICATION_RESTRICTED_LOWDELAY">
            <summary>
            Only use when lowest-achievable latency is what matters most. Voice-optimized modes cannot be used.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.OpusPredefinedValues.OPUS_SIGNAL_VOICE">
            <summary>
            Signal being encoded is voice.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.OpusPredefinedValues.OPUS_SIGNAL_MUSIC">
            <summary>
            Signal being encoded is music.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.OpusPredefinedValues.OPUS_BANDWIDTH_NARROWBAND">
            <summary>
            4 kHz bandpass.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.OpusPredefinedValues.OPUS_BANDWIDTH_MEDIUMBAND">
            <summary>
            6 kHz bandpass.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.OpusPredefinedValues.OPUS_BANDWIDTH_WIDEBAND">
            <summary>
            8 kHz bandpass.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.OpusPredefinedValues.OPUS_BANDWIDTH_SUPERWIDEBAND">
            <summary>
            12 kHz bandpass.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.OpusPredefinedValues.OPUS_BANDWIDTH_FULLBAND">
            <summary>
            20 kHz bandpass.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.OpusPredefinedValues.OPUS_FRAMESIZE_ARG">
            <summary>
            Select frame size from the argument (default).
            </summary>
        </member>
        <member name="F:OpusSharp.Core.OpusPredefinedValues.OPUS_FRAMESIZE_2_5_MS">
            <summary>
            Use 2.5 ms frames.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.OpusPredefinedValues.OPUS_FRAMESIZE_5_MS">
            <summary>
            Use 5 ms frames.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.OpusPredefinedValues.OPUS_FRAMESIZE_10_MS">
            <summary>
            Use 10 ms frames.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.OpusPredefinedValues.OPUS_FRAMESIZE_20_MS">
            <summary>
            Use 20 ms frames.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.OpusPredefinedValues.OPUS_FRAMESIZE_40_MS">
            <summary>
            Use 40 ms frames.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.OpusPredefinedValues.OPUS_FRAMESIZE_60_MS">
            <summary>
            Use 60 ms frames.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.OpusPredefinedValues.OPUS_FRAMESIZE_80_MS">
            <summary>
            Use 80 ms frames.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.OpusPredefinedValues.OPUS_FRAMESIZE_100_MS">
            <summary>
            Use 100 ms frames.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.OpusPredefinedValues.OPUS_FRAMESIZE_120_MS">
            <summary>
            Use 120 ms frames.
            </summary>
        </member>
        <member name="T:OpusSharp.Core.GenericCTL">
            <summary>
            These macros are used with the opus_decoder_ctl and opus_encoder_ctl calls to generate a particular request.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.GenericCTL.OPUS_RESET_STATE">
            <summary>
            Resets the codec state to be equivalent to a freshly initialized state.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.GenericCTL.OPUS_GET_FINAL_RANGE">
            <summary>
            Gets the final state of the codec's entropy coder.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.GenericCTL.OPUS_GET_BANDWIDTH">
            <summary>
            Gets the encoder's configured bandpass or the decoder's last bandpass.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.GenericCTL.OPUS_GET_SAMPLE_RATE">
            <summary>
            Gets the sampling rate the encoder or decoder was initialized with.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.GenericCTL.OPUS_SET_PHASE_INVERSION_DISABLED">
            <summary>
            If set to 1, disables the use of phase inversion for intensity stereo, improving the quality of mono down-mixes, but slightly reducing normal stereo quality.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.GenericCTL.OPUS_GET_PHASE_INVERSION_DISABLED">
            <summary>
            Gets the encoder's configured phase inversion status.
            </summary>
        </member>
        <member name="T:OpusSharp.Core.EncoderCTL">
            <summary>
            These are convenience macros for use with the opus_encoder_ctl interface.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.EncoderCTL.OPUS_SET_APPLICATION">
            <summary>
            Configures the encoder's intended application.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.EncoderCTL.OPUS_GET_APPLICATION">
            <summary>
            Gets the encoder's configured application.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.EncoderCTL.OPUS_SET_BITRATE">
            <summary>
            Configures the bitrate in the encoder.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.EncoderCTL.OPUS_GET_BITRATE">
            <summary>
            Gets the encoder's bitrate configuration.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.EncoderCTL.OPUS_SET_MAX_BANDWIDTH">
            <summary>
            Configures the maximum bandpass that the encoder will select automatically.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.EncoderCTL.OPUS_GET_MAX_BANDWIDTH">
            <summary>
            Gets the encoder's configured maximum allowed bandpass.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.EncoderCTL.OPUS_SET_VBR">
            <summary>
            Enables or disables variable bitrate (VBR) in the encoder.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.EncoderCTL.OPUS_GET_VBR">
            <summary>
            Determine if variable bitrate (VBR) is enabled in the encoder.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.EncoderCTL.OPUS_SET_BANDWIDTH">
            <summary>
            Sets the encoder's bandpass to a specific value.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.EncoderCTL.OPUS_SET_COMPLEXITY">
            <summary>
            Configures the encoder's computational complexity.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.EncoderCTL.OPUS_GET_COMPLEXITY">
            <summary>
            Gets the encoder's complexity configuration.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.EncoderCTL.OPUS_SET_INBAND_FEC">
            <summary>
            Configures the encoder's use of in-band forward error correction (FEC).
            </summary>
        </member>
        <member name="F:OpusSharp.Core.EncoderCTL.OPUS_GET_INBAND_FEC">
            <summary>
            Gets encoder's configured use of in-band forward error correction.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.EncoderCTL.OPUS_SET_PACKET_LOSS_PERC">
            <summary>
            Configures the encoder's expected packet loss percentage.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.EncoderCTL.OPUS_GET_PACKET_LOSS_PERC">
            <summary>
            Gets the encoder's configured packet loss percentage.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.EncoderCTL.OPUS_SET_DTX">
            <summary>
            Configures the encoder's use of discontinuous transmission (DTX).
            </summary>
        </member>
        <member name="F:OpusSharp.Core.EncoderCTL.OPUS_GET_DTX">
            <summary>
            Gets encoder's configured use of discontinuous transmission.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.EncoderCTL.OPUS_SET_VBR_CONSTRAINT">
            <summary>
            Enables or disables constrained VBR in the encoder.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.EncoderCTL.OPUS_GET_VBR_CONSTRAINT">
            <summary>
            Determine if constrained VBR is enabled in the encoder.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.EncoderCTL.OPUS_SET_FORCE_CHANNELS">
            <summary>
            Configures mono/stereo forcing in the encoder.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.EncoderCTL.OPUS_GET_FORCE_CHANNELS">
            <summary>
            Gets the encoder's forced channel configuration.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.EncoderCTL.OPUS_SET_SIGNAL">
            <summary>
            Configures the type of signal being encoded.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.EncoderCTL.OPUS_GET_SIGNAL">
            <summary>
            Gets the encoder's configured signal type.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.EncoderCTL.OPUS_GET_LOOKAHEAD">
            <summary>
            Gets the total samples of delay added by the entire codec.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.EncoderCTL.OPUS_SET_LSB_DEPTH">
            <summary>
            Configures the depth of signal being encoded.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.EncoderCTL.OPUS_GET_LSB_DEPTH">
            <summary>
            Gets the encoder's configured signal depth.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.EncoderCTL.OPUS_SET_EXPERT_FRAME_DURATION">
            <summary>
            Configures the encoder's use of variable duration frames.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.EncoderCTL.OPUS_GET_EXPERT_FRAME_DURATION">
            <summary>
            Gets the encoder's configured use of variable duration frames.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.EncoderCTL.OPUS_SET_PREDICTION_DISABLED">
            <summary>
            If set to 1, disables almost all use of prediction, making frames almost completely independent. This reduces quality.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.EncoderCTL.OPUS_GET_PREDICTION_DISABLED">
            <summary>
            Gets the encoder's configured prediction status.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.EncoderCTL.OPUS_GET_IN_DTX">
            <summary>
            Gets the DTX state of the encoder.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.EncoderCTL.OPUS_SET_DRED_DURATION">
            <summary>
            If non-zero, enables Deep Redundancy (DRED) and use the specified maximum number of 10-ms redundant frames.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.EncoderCTL.OPUS_GET_DRED_DURATION">
            <summary>
            Gets the encoder's configured Deep Redundancy (DRED) maximum number of frames.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.EncoderCTL.OPUS_SET_DNN_BLOB">
            <summary>
            Provide external DNN weights from binary object (only when explicitly built without the weights).
            </summary>
        </member>
        <member name="T:OpusSharp.Core.DecoderCTL">
            <summary>
            These are convenience macros for use with the opus_decoder_ctl interface
            </summary>
        </member>
        <member name="F:OpusSharp.Core.DecoderCTL.OPUS_SET_GAIN">
            <summary>
            Configures decoder gain adjustment.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.DecoderCTL.OPUS_GET_GAIN">
            <summary>
            Gets the decoder's configured gain adjustment.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.DecoderCTL.OPUS_GET_LAST_PACKET_DURATION">
            <summary>
            Gets the duration (in samples) of the last packet successfully decoded or concealed.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.DecoderCTL.OPUS_GET_PITCH">
            <summary>
            Gets the pitch of the last decoded frame, if available.
            </summary>
        </member>
        <member name="T:OpusSharp.Core.MultistreamCTL">
            <summary>
            These are convenience macros that are specific to the opus_multistream_encoder_ctl() and opus_multistream_decoder_ctl() interface.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.MultistreamCTL.OPUS_MULTISTREAM_GET_ENCODER_STATE">
            <summary>
            Gets the encoder state for an individual stream of a multi-stream encoder.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.MultistreamCTL.OPUS_MULTISTREAM_GET_DECODER_STATE">
            <summary>
            Gets the decoder state for an individual stream of a multi-stream decoder.
            </summary>
        </member>
        <member name="T:OpusSharp.Core.NativeOpus">
            <summary>
            Native opus handler that directly calls the exported opus functions.
            </summary>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_encoder_get_size(System.Int32)">
            <summary>
            Gets the size of an <see cref="T:OpusSharp.Core.SafeHandlers.OpusEncoderSafeHandle"/> structure.
            </summary>
            <param name="channels">Number of channels. This must be 1 or 2.</param>
            <returns>The size in bytes.</returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_encoder_create(System.Int32,System.Int32,System.Int32,System.Int32*)">
            <summary>
            Allocates and initializes an encoder state.
            </summary>
            <param name="Fs">Sampling rate of input signal (Hz) This must be one of 8000, 12000, 16000, 24000, or 48000.</param>
            <param name="channels">Number of channels (1 or 2) in input signal.</param>
            <param name="application">Coding mode (one of <see cref="F:OpusSharp.Core.OpusPredefinedValues.OPUS_APPLICATION_VOIP"/>, <see cref="F:OpusSharp.Core.OpusPredefinedValues.OPUS_APPLICATION_AUDIO"/> or <see cref="F:OpusSharp.Core.OpusPredefinedValues.OPUS_APPLICATION_RESTRICTED_LOWDELAY"/>)</param>
            <param name="error"><see cref="F:OpusSharp.Core.OpusErrorCodes.OPUS_OK"/> Success or <see cref="T:OpusSharp.Core.OpusErrorCodes"/>.</param>
            <returns><see cref="T:OpusSharp.Core.SafeHandlers.OpusEncoderSafeHandle"/></returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_encoder_init(OpusSharp.Core.SafeHandlers.OpusEncoderSafeHandle,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a previously allocated <see cref="T:OpusSharp.Core.SafeHandlers.OpusEncoderSafeHandle"/> state. The memory pointed to by st must be at least the size returned by <see cref="M:OpusSharp.Core.NativeOpus.opus_encoder_get_size(System.Int32)"/>.
            </summary>
            <param name="st">Encoder state.</param>
            <param name="Fs">Sampling rate of input signal (Hz) This must be one of 8000, 12000, 16000, 24000, or 48000.</param>
            <param name="channels">Number of channels (1 or 2) in input signal.</param>
            <param name="application">>Coding mode (one of <see cref="F:OpusSharp.Core.OpusPredefinedValues.OPUS_APPLICATION_VOIP"/>, <see cref="F:OpusSharp.Core.OpusPredefinedValues.OPUS_APPLICATION_AUDIO"/> or <see cref="F:OpusSharp.Core.OpusPredefinedValues.OPUS_APPLICATION_RESTRICTED_LOWDELAY"/>)</param>
            <returns><see cref="T:OpusSharp.Core.OpusErrorCodes"/></returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_encode(OpusSharp.Core.SafeHandlers.OpusEncoderSafeHandle,System.Int16*,System.Int32,System.Byte*,System.Int32)">
            <summary>
            Encodes an Opus frame.
            </summary>
            <param name="st">Encoder state.</param>
            <param name="pcm">Input signal (interleaved if 2 channels). length is frame_size*channels*sizeof(short)</param>
            <param name="frame_size">Number of samples per channel in the input signal. This must be an Opus frame size for the encoder's sampling rate. For example, at 48 kHz the permitted values are 120, 240, 480, 960, 1920, and 2880. Passing in a duration of less than 10 ms (480 samples at 48 kHz) will prevent the encoder from using the LPC or hybrid modes.</param>
            <param name="data">Output payload. This must contain storage for at least max_data_bytes.</param>
            <param name="max_data_bytes">Size of the allocated memory for the output payload. This may be used to impose an upper limit on the instant bitrate, but should not be used as the only bitrate control. Use <see cref="F:OpusSharp.Core.EncoderCTL.OPUS_SET_BITRATE"/> to control the bitrate.</param>
            <returns>The length of the encoded packet (in bytes) on success or a negative error code (see <see cref="T:OpusSharp.Core.OpusErrorCodes"/>) on failure.</returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_encode_float(OpusSharp.Core.SafeHandlers.OpusEncoderSafeHandle,System.Single*,System.Int32,System.Byte*,System.Int32)">
            <summary>
            Encodes an Opus frame from floating point input.
            </summary>
            <param name="st">Encoder state.</param>
            <param name="pcm">Input in float format (interleaved if 2 channels), with a normal range of +/-1.0. Samples with a range beyond +/-1.0 are supported but will be clipped by decoders using the integer API and should only be used if it is known that the far end supports extended dynamic range. length is frame_size*channels*sizeof(float)</param>
            <param name="frame_size">Number of samples per channel in the input signal. This must be an Opus frame size for the encoder's sampling rate. For example, at 48 kHz the permitted values are 120, 240, 480, 960, 1920, and 2880. Passing in a duration of less than 10 ms (480 samples at 48 kHz) will prevent the encoder from using the LPC or hybrid modes.</param>
            <param name="data">Output payload. This must contain storage for at least max_data_bytes.</param>
            <param name="max_data_bytes">Size of the allocated memory for the output payload. This may be used to impose an upper limit on the instant bitrate, but should not be used as the only bitrate control. Use <see cref="F:OpusSharp.Core.EncoderCTL.OPUS_SET_BITRATE"/> to control the bitrate.</param>
            <returns>The length of the encoded packet (in bytes) on success or a negative error code (see <see cref="T:OpusSharp.Core.OpusErrorCodes"/>) on failure.</returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_encoder_destroy(System.IntPtr)">
            <summary>
            Frees an <see cref="T:OpusSharp.Core.SafeHandlers.OpusEncoderSafeHandle"/> allocated by <see cref="M:OpusSharp.Core.NativeOpus.opus_encoder_create(System.Int32,System.Int32,System.Int32,System.Int32*)"/>.
            </summary>
            <param name="st">State to be freed.</param>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_encoder_ctl(OpusSharp.Core.SafeHandlers.OpusEncoderSafeHandle,System.Int32)">
            <summary>
            Perform a CTL function on an <see cref="T:OpusSharp.Core.SafeHandlers.OpusEncoderSafeHandle"/>.
            </summary>
            <param name="st">Encoder state.</param>
            <param name="request">This and all remaining parameters should be replaced by one of the convenience macros in <see cref="T:OpusSharp.Core.GenericCTL"/> or <see cref="T:OpusSharp.Core.EncoderCTL"/>.</param>
            <returns><see cref="T:OpusSharp.Core.OpusErrorCodes"/></returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_encoder_ctl(OpusSharp.Core.SafeHandlers.OpusEncoderSafeHandle,System.Int32,System.Void*)">
            <summary>
            Perform a CTL function on an <see cref="T:OpusSharp.Core.SafeHandlers.OpusEncoderSafeHandle"/>.
            </summary>
            <param name="st">Encoder state.</param>
            <param name="request">This and all remaining parameters should be replaced by one of the convenience macros in <see cref="T:OpusSharp.Core.GenericCTL"/> or <see cref="T:OpusSharp.Core.EncoderCTL"/>.</param>
            <param name="data">The data to input/output.</param>
            <returns><see cref="T:OpusSharp.Core.OpusErrorCodes"/></returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_encoder_ctl(OpusSharp.Core.SafeHandlers.OpusEncoderSafeHandle,System.Int32,System.Void*,System.Void*)">
            <summary>
            Perform a CTL function on an Opus encoder.
            </summary>
            <param name="st">Encoder state.</param>
            <param name="request">This and all remaining parameters should be replaced by one of the convenience macros in <see cref="T:OpusSharp.Core.GenericCTL"/> or <see cref="T:OpusSharp.Core.EncoderCTL"/>.</param>
            <param name="data">The data to input/output.</param>
            <param name="data2">The second data to input/output.</param>
            <returns><see cref="T:OpusSharp.Core.OpusErrorCodes"/></returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_decoder_get_size(System.Int32)">
            <summary>
            Gets the size of an <see cref="T:OpusSharp.Core.SafeHandlers.OpusDecoderSafeHandle"/> structure.
            </summary>
            <param name="channels">Number of channels. This must be 1 or 2.</param>
            <returns>The size in bytes.</returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_decoder_create(System.Int32,System.Int32,System.Int32*)">
            <summary>
            Allocates and initializes a <see cref="T:OpusSharp.Core.SafeHandlers.OpusDecoderSafeHandle"/> state.
            </summary>
            <param name="Fs">Sample rate to decode at (Hz). This must be one of 8000, 12000, 16000, 24000, or 48000.</param>
            <param name="channels">Number of channels (1 or 2) to decode.</param>
            <param name="error"><see cref="F:OpusSharp.Core.OpusErrorCodes.OPUS_OK"/> Success or <see cref="T:OpusSharp.Core.OpusErrorCodes"/>.</param>
            <returns><see cref="T:OpusSharp.Core.SafeHandlers.OpusDecoderSafeHandle"/></returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_decoder_init(OpusSharp.Core.SafeHandlers.OpusDecoderSafeHandle,System.Int32,System.Int32)">
            <summary>
            Initializes a previously allocated <see cref="T:OpusSharp.Core.SafeHandlers.OpusDecoderSafeHandle"/> state.
            </summary>
            <param name="st">Decoder state.</param>
            <param name="Fs">Sampling rate to decode to (Hz). This must be one of 8000, 12000, 16000, 24000, or 48000.</param>
            <param name="channels">Number of channels (1 or 2) to decode.</param>
            <returns><see cref="F:OpusSharp.Core.OpusErrorCodes.OPUS_OK"/> Success or <see cref="T:OpusSharp.Core.OpusErrorCodes"/>.</returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_decode(OpusSharp.Core.SafeHandlers.OpusDecoderSafeHandle,System.Byte*,System.Int32,System.Int16*,System.Int32,System.Int32)">
            <summary>
            Decode an Opus packet.
            </summary>
            <param name="st">Decoder state.</param>
            <param name="data">Input payload. Use a NULL pointer to indicate packet loss.</param>
            <param name="len">Number of bytes in payload.</param>
            <param name="pcm">Output signal (interleaved if 2 channels). length is frame_size*channels*sizeof(short).</param>
            <param name="frame_size">Number of samples per channel of available space in pcm. If this is less than the maximum packet duration (120ms; 5760 for 48kHz), this function will not be capable of decoding some packets. In the case of PLC (data==NULL) or FEC (decode_fec=1), then frame_size needs to be exactly the duration of audio that is missing, otherwise the decoder will not be in the optimal state to decode the next incoming packet. For the PLC and FEC cases, frame_size must be a multiple of 2.5 ms.</param>
            <param name="decode_fec">Flag (0 or 1) to request that any in-band forward error correction data be decoded. If no such data is available, the frame is decoded as if it were lost.</param>
            <returns>Number of decoded samples or <see cref="T:OpusSharp.Core.OpusErrorCodes"/>.</returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_decode_float(OpusSharp.Core.SafeHandlers.OpusDecoderSafeHandle,System.Byte*,System.Int32,System.Single*,System.Int32,System.Int32)">
            <summary>
            Decode an Opus packet with floating point output.
            </summary>
            <param name="st">Decoder state.</param>
            <param name="data">Input payload. Use a NULL pointer to indicate packet loss.</param>
            <param name="len">Number of bytes in payload.</param>
            <param name="pcm">Output signal (interleaved if 2 channels). length is frame_size*channels*sizeof(float).</param>
            <param name="frame_size">Number of samples per channel of available space in pcm. If this is less than the maximum packet duration (120ms; 5760 for 48kHz), this function will not be capable of decoding some packets. In the case of PLC (data==NULL) or FEC (decode_fec=1), then frame_size needs to be exactly the duration of audio that is missing, otherwise the decoder will not be in the optimal state to decode the next incoming packet. For the PLC and FEC cases, frame_size must be a multiple of 2.5 ms.</param>
            <param name="decode_fec">Flag (0 or 1) to request that any in-band forward error correction data be decoded. If no such data is available the frame is decoded as if it were lost.</param>
            <returns>Number of decoded samples or <see cref="T:OpusSharp.Core.OpusErrorCodes"/></returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_decoder_ctl(OpusSharp.Core.SafeHandlers.OpusDecoderSafeHandle,System.Int32)">
            <summary>
            Perform a CTL function on an <see cref="T:OpusSharp.Core.SafeHandlers.OpusDecoderSafeHandle"/>.
            </summary>
            <param name="st">Decoder state.</param>
            <param name="request">This and all remaining parameters should be replaced by one of the convenience macros in <see cref="T:OpusSharp.Core.GenericCTL"/> or <see cref="T:OpusSharp.Core.DecoderCTL"/>.</param>
            <returns><see cref="T:OpusSharp.Core.OpusErrorCodes"/></returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_decoder_ctl(OpusSharp.Core.SafeHandlers.OpusDecoderSafeHandle,System.Int32,System.Void*)">
            <summary>
            Perform a CTL function on an <see cref="T:OpusSharp.Core.SafeHandlers.OpusDecoderSafeHandle"/>.
            </summary>
            <param name="st">Decoder state.</param>
            <param name="request">This and all remaining parameters should be replaced by one of the convenience macros in <see cref="T:OpusSharp.Core.GenericCTL"/> or <see cref="T:OpusSharp.Core.DecoderCTL"/>.</param>
            <param name="data">The data to input or output.</param>
            <returns><see cref="T:OpusSharp.Core.OpusErrorCodes"/></returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_decoder_destroy(System.IntPtr)">
            <summary>
            Frees an <see cref="T:OpusSharp.Core.SafeHandlers.OpusDecoderSafeHandle"/> allocated by <see cref="M:OpusSharp.Core.NativeOpus.opus_decoder_create(System.Int32,System.Int32,System.Int32*)"/>.
            </summary>
            <param name="st">State to be freed.</param>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_dred_decoder_get_size">
            <summary>
            Gets the size of an <see cref="T:OpusSharp.Core.SafeHandlers.OpusDREDDecoderSafeHandle"/> structure.
            </summary>
            <returns>The size in bytes.</returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_dred_decoder_create(System.Int32*)">
            <summary>
            Allocates and initializes an <see cref="T:OpusSharp.Core.SafeHandlers.OpusDREDDecoderSafeHandle"/> state.
            </summary>
            <param name="error"><see cref="F:OpusSharp.Core.OpusErrorCodes.OPUS_OK"/> Success or <see cref="T:OpusSharp.Core.OpusErrorCodes"/>.</param>
            <returns><see cref="T:OpusSharp.Core.SafeHandlers.OpusDREDDecoderSafeHandle"/></returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_dred_decoder_init(OpusSharp.Core.SafeHandlers.OpusDREDDecoderSafeHandle)">
            <summary>
            Initializes an <see cref="T:OpusSharp.Core.SafeHandlers.OpusDREDDecoderSafeHandle"/> state.
            </summary>
            <param name="dec">State to be initialized.</param>
            <returns><see cref="T:OpusSharp.Core.OpusErrorCodes"/></returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_dred_decoder_destroy(System.IntPtr)">
            <summary>
            Frees an <see cref="T:OpusSharp.Core.SafeHandlers.OpusDREDDecoderSafeHandle"/> allocated by <see cref="M:OpusSharp.Core.NativeOpus.opus_dred_decoder_create(System.Int32*)"/>.
            </summary>
            <param name="dec">State to be freed.</param>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_dred_decoder_ctl(OpusSharp.Core.SafeHandlers.OpusDREDDecoderSafeHandle,System.Int32)">
            <summary>
            Perform a CTL function on an <see cref="T:OpusSharp.Core.SafeHandlers.OpusDREDDecoderSafeHandle"/>.
            </summary>
            <param name="dred_dec">DRED Decoder state.</param>
            <param name="request">This and all remaining parameters should be replaced by one of the convenience macros in <see cref="T:OpusSharp.Core.GenericCTL"/> or <see cref="T:OpusSharp.Core.DecoderCTL"/>.</param>
            <returns><see cref="T:OpusSharp.Core.OpusErrorCodes"/></returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_dred_decoder_ctl(OpusSharp.Core.SafeHandlers.OpusDREDDecoderSafeHandle,System.Int32,System.Void*)">
            <summary>
            Perform a CTL function on an <see cref="T:OpusSharp.Core.SafeHandlers.OpusDREDDecoderSafeHandle"/>.
            </summary>
            <param name="dred_dec">DRED Decoder state.</param>
            <param name="request">This and all remaining parameters should be replaced by one of the convenience macros in <see cref="T:OpusSharp.Core.GenericCTL"/> or <see cref="T:OpusSharp.Core.DecoderCTL"/>.</param>
            <param name="data">The data to input or output.</param>
            <returns><see cref="T:OpusSharp.Core.OpusErrorCodes"/></returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_dred_get_size">
            <summary>
            Gets the size of an <see cref="T:OpusSharp.Core.SafeHandlers.OpusDREDSafeHandle"/> structure.
            </summary>
            <returns>The size in bytes.</returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_dred_alloc(System.Int32*)">
            <summary>
            Allocates and initializes a <see cref="T:OpusSharp.Core.SafeHandlers.OpusDREDSafeHandle"/> state.
            </summary>
            <param name="error"><see cref="F:OpusSharp.Core.OpusErrorCodes.OPUS_OK"/> Success or <see cref="T:OpusSharp.Core.OpusErrorCodes"/>.</param>
            <returns><see cref="T:OpusSharp.Core.SafeHandlers.OpusDREDSafeHandle"/></returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_dred_free(System.IntPtr)">
            <summary>
            Frees an <see cref="T:OpusSharp.Core.SafeHandlers.OpusDREDSafeHandle"/> allocated by <see cref="M:OpusSharp.Core.NativeOpus.opus_dred_alloc(System.Int32*)"/>.
            </summary>
            <param name="dec">State to be freed.</param>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_dred_parse(OpusSharp.Core.SafeHandlers.OpusDREDDecoderSafeHandle,OpusSharp.Core.SafeHandlers.OpusDREDSafeHandle,System.Byte*,System.Int32,System.Int32,System.Int32,System.Int32*,System.Int32)">
            <summary>
            Decode an Opus DRED packet.
            </summary>
            <param name="dred_dec">DRED Decoder state.</param>
            <param name="dred">DRED state.</param>
            <param name="data">Input payload.</param>
            <param name="len">Number of bytes in payload.</param>
            <param name="max_dred_samples">Maximum number of DRED samples that may be needed (if available in the packet).</param>
            <param name="sampling_rate">Sampling rate used for max_dred_samples argument. Needs not match the actual sampling rate of the decoder.</param>
            <param name="dred_end">Number of non-encoded (silence) samples between the DRED timestamp and the last DRED sample.</param>
            <param name="defer_processing">Flag (0 or 1). If set to one, the CPU-intensive part of the DRED decoding is deferred until <see cref="M:OpusSharp.Core.NativeOpus.opus_dred_process(OpusSharp.Core.SafeHandlers.OpusDREDDecoderSafeHandle,OpusSharp.Core.SafeHandlers.OpusDREDSafeHandle,OpusSharp.Core.SafeHandlers.OpusDREDSafeHandle)"/> is called.</param>
            <returns>Offset (positive) of the first decoded DRED samples, zero if no DRED is present, or <see cref="T:OpusSharp.Core.OpusErrorCodes"/></returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_dred_process(OpusSharp.Core.SafeHandlers.OpusDREDDecoderSafeHandle,OpusSharp.Core.SafeHandlers.OpusDREDSafeHandle,OpusSharp.Core.SafeHandlers.OpusDREDSafeHandle)">
            <summary>
            Finish decoding an <see cref="T:OpusSharp.Core.SafeHandlers.OpusDREDSafeHandle"/> packet.
            </summary>
            <param name="dred_dec">DRED Decoder state.</param>
            <param name="src">Source DRED state to start the processing from.</param>
            <param name="dst">Destination DRED state to store the updated state after processing.</param>
            <returns><see cref="T:OpusSharp.Core.OpusErrorCodes"/></returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_decoder_dred_decode(OpusSharp.Core.SafeHandlers.OpusDecoderSafeHandle,OpusSharp.Core.SafeHandlers.OpusDREDSafeHandle,System.Int32,System.Int16*,System.Int32)">
            <summary>
            Decode audio from an <see cref="T:OpusSharp.Core.SafeHandlers.OpusDREDSafeHandle"/> packet with floating point output.
            </summary>
            <param name="st">Decoder state.</param>
            <param name="dred">DRED state.</param>
            <param name="dred_offset">position of the redundancy to decode (in samples before the beginning of the real audio data in the packet).</param>
            <param name="pcm">Output signal (interleaved if 2 channels). length is frame_size*channels*sizeof(short)</param>
            <param name="frame_size">Number of samples per channel to decode in pcm. frame_size must be a multiple of 2.5 ms.</param>
            <returns>Number of decoded samples or <see cref="T:OpusSharp.Core.OpusErrorCodes"/>.</returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_decoder_dred_decode_float(OpusSharp.Core.SafeHandlers.OpusDecoderSafeHandle,OpusSharp.Core.SafeHandlers.OpusDREDSafeHandle,System.Int32,System.Single*,System.Int32)">
            <summary>
            Decode audio from an <see cref="T:OpusSharp.Core.SafeHandlers.OpusDREDSafeHandle"/> packet with floating point output.
            </summary>
            <param name="st">Decoder state.</param>
            <param name="dred">DRED state.</param>
            <param name="dred_offset">position of the redundancy to decode (in samples before the beginning of the real audio data in the packet).</param>
            <param name="pcm">Output signal (interleaved if 2 channels). length is frame_size*channels*sizeof(float).</param>
            <param name="frame_size">Number of samples per channel to decode in pcm. frame_size must be a multiple of 2.5 ms.</param>
            <returns>Number of decoded samples or <see cref="T:OpusSharp.Core.OpusErrorCodes"/>.</returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_packet_parse(System.Byte*,System.Int32,System.Byte*,System.Byte*[],System.Int16[],System.Int32*)">
            <summary>
            Parse an opus packet into one or more frames.
            </summary>
            <param name="data">Opus packet to be parsed.</param>
            <param name="len">size of data.</param>
            <param name="out_toc">TOC pointer.</param>
            <param name="frames">encapsulated frames.</param>
            <param name="size">sizes of the encapsulated frames.</param>
            <param name="payload_offset">returns the position of the payload within the packet (in bytes).</param>
            <returns>number of frames.</returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_packet_get_bandwidth(System.Byte*)">
            <summary>
            Gets the bandwidth of an Opus packet.
            </summary>
            <param name="data">Opus packet.</param>
            <returns><see cref="T:OpusSharp.Core.OpusPredefinedValues"/> or <see cref="T:OpusSharp.Core.OpusErrorCodes"/></returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_packet_get_samples_per_frame(System.Byte*,System.Int32)">
            <summary>
            Gets the number of samples per frame from an Opus packet.
            </summary>
            <param name="data">Opus packet. This must contain at least one byte of data.</param>
            <param name="Fs">Sampling rate in Hz. This must be a multiple of 400, or inaccurate results will be returned.</param>
            <returns>Number of samples per frame.</returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_packet_get_nb_channels(System.Byte*)">
            <summary>
            Gets the number of channels from an Opus packet.
            </summary>
            <param name="data">Opus packet.</param>
            <returns>Number of channels or <see cref="T:OpusSharp.Core.OpusErrorCodes"/>.</returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_packet_get_nb_frames(System.Byte*,System.Int32)">
            <summary>
            Gets the number of frames in an Opus packet.
            </summary>
            <param name="packet">Opus packet.</param>
            <param name="len">Length of packet.</param>
            <returns>Number of frames or <see cref="T:OpusSharp.Core.OpusErrorCodes"/>.</returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_packet_get_nb_samples(System.Byte*,System.Int32,System.Int32)">
            <summary>
            Gets the number of samples of an Opus packet.
            </summary>
            <param name="packet">Opus packet.</param>
            <param name="len">Length of packet.</param>
            <param name="Fs">Sampling rate in Hz. This must be a multiple of 400, or inaccurate results will be returned.</param>
            <returns>Number of samples or <see cref="T:OpusSharp.Core.OpusErrorCodes"/>.</returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_packet_has_lbrr(System.Byte*,System.Int32)">
            <summary>
            Checks whether an Opus packet has LBRR.
            </summary>
            <param name="packet">Opus packet.</param>
            <param name="len">Length of packet.</param>
            <returns>1 is LBRR is present, 0 otherwise or <see cref="T:OpusSharp.Core.OpusErrorCodes"/></returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_decoder_get_nb_samples(OpusSharp.Core.SafeHandlers.OpusDecoderSafeHandle,System.Byte*,System.Int32)">
            <summary>
            Gets the number of samples of an Opus packet.
            </summary>
            <param name="dec">Decoder state.</param>
            <param name="packet">Opus packet.</param>
            <param name="len">Length of packet.</param>
            <returns>Number of samples or <see cref="T:OpusSharp.Core.OpusErrorCodes"/>.</returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_pcm_soft_clip(System.Single*,System.Int32,System.Int32,System.Single*)">
            <summary>
            Applies soft-clipping to bring a float signal within the [-1,1] range.
            </summary>
            <param name="pcm">Input PCM and modified PCM.</param>
            <param name="frame_size">Number of samples per channel to process.</param>
            <param name="channels">Number of channels.</param>
            <param name="softclip_mem">State memory for the soft clipping process (one float per channel, initialized to zero).</param>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_repacketizer_get_size">
            <summary>
            Gets the size of an <see cref="T:OpusSharp.Core.SafeHandlers.OpusRepacketizerSafeHandle"/> structure.
            </summary>
            <returns>The size in bytes.</returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_repacketizer_init(OpusSharp.Core.SafeHandlers.OpusRepacketizerSafeHandle)">
            <summary>
            (Re)initializes a previously allocated <see cref="T:OpusSharp.Core.SafeHandlers.OpusRepacketizerSafeHandle"/> state.
            </summary>
            <param name="rp">The <see cref="T:OpusSharp.Core.SafeHandlers.OpusRepacketizerSafeHandle"/> state to (re)initialize.</param>
            <returns><see cref="T:OpusSharp.Core.SafeHandlers.OpusRepacketizerSafeHandle"/></returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_repacketizer_create">
            <summary>
            Allocates memory and initializes the new <see cref="T:OpusSharp.Core.SafeHandlers.OpusRepacketizerSafeHandle"/> with <see cref="M:OpusSharp.Core.NativeOpus.opus_repacketizer_init(OpusSharp.Core.SafeHandlers.OpusRepacketizerSafeHandle)"/>.
            </summary>
            <returns><see cref="T:OpusSharp.Core.SafeHandlers.OpusRepacketizerSafeHandle"/></returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_repacketizer_destroy(System.IntPtr)">
            <summary>
            Frees an <see cref="T:OpusSharp.Core.SafeHandlers.OpusRepacketizerSafeHandle"/> allocated by <see cref="M:OpusSharp.Core.NativeOpus.opus_repacketizer_create"/>.
            </summary>
            <param name="rp">State to be freed.</param>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_repacketizer_cat(OpusSharp.Core.SafeHandlers.OpusRepacketizerSafeHandle,System.Byte*,System.Int32)">
            <summary>
            Add a packet to the current <see cref="T:OpusSharp.Core.SafeHandlers.OpusRepacketizerSafeHandle"/> state.
            </summary>
            <param name="rp">The repacketizer state to which to add the packet.</param>
            <param name="data">The packet data. The application must ensure this pointer remains valid until the next call to <see cref="M:OpusSharp.Core.NativeOpus.opus_repacketizer_init(OpusSharp.Core.SafeHandlers.OpusRepacketizerSafeHandle)"/> or <see cref="M:OpusSharp.Core.NativeOpus.opus_repacketizer_destroy(System.IntPtr)"/>.</param>
            <param name="len">The number of bytes in the packet data.</param>
            <returns><see cref="T:OpusSharp.Core.OpusErrorCodes"/></returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_repacketizer_out_range(OpusSharp.Core.SafeHandlers.OpusRepacketizerSafeHandle,System.Int32,System.Int32,System.Byte*,System.Int32)">
            <summary>
            Construct a new packet from data previously submitted to the <see cref="T:OpusSharp.Core.SafeHandlers.OpusRepacketizerSafeHandle"/> state via <see cref="M:OpusSharp.Core.NativeOpus.opus_repacketizer_cat(OpusSharp.Core.SafeHandlers.OpusRepacketizerSafeHandle,System.Byte*,System.Int32)"/>.
            </summary>
            <param name="rp">The repacketizer state from which to construct the new packet.</param>
            <param name="begin">The index of the first frame in the current repacketizer state to include in the output.</param>
            <param name="end">One past the index of the last frame in the current repacketizer state to include in the output.</param>
            <param name="data">The buffer in which to store the output packet.</param>
            <param name="maxlen">The maximum number of bytes to store in the output buffer. In order to guarantee success, this should be at least 1276 for a single frame, or for multiple frames, 1277*(end-begin). However, 1*(end-begin) plus the size of all packet data submitted to the repacketizer since the last call to <see cref="M:OpusSharp.Core.NativeOpus.opus_repacketizer_init(OpusSharp.Core.SafeHandlers.OpusRepacketizerSafeHandle)"/> or <see cref="M:OpusSharp.Core.NativeOpus.opus_repacketizer_create"/> is also sufficient, and possibly much smaller.</param>
            <returns>The total size of the output packet on success, or an <see cref="T:OpusSharp.Core.OpusErrorCodes"/> on failure.</returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_repacketizer_get_nb_frames(OpusSharp.Core.SafeHandlers.OpusRepacketizerSafeHandle)">
            <summary>
            Return the total number of frames contained in packet data submitted to the <see cref="T:OpusSharp.Core.SafeHandlers.OpusRepacketizerSafeHandle"/> state so far via <see cref="M:OpusSharp.Core.NativeOpus.opus_repacketizer_cat(OpusSharp.Core.SafeHandlers.OpusRepacketizerSafeHandle,System.Byte*,System.Int32)"/> since the last call to <see cref="M:OpusSharp.Core.NativeOpus.opus_repacketizer_init(OpusSharp.Core.SafeHandlers.OpusRepacketizerSafeHandle)"/> or <see cref="M:OpusSharp.Core.NativeOpus.opus_repacketizer_create"/>.
            </summary>
            <param name="rp">The repacketizer state containing the frames.</param>
            <returns>The total number of frames contained in the packet data submitted to the repacketizer state.</returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_repacketizer_out(OpusSharp.Core.SafeHandlers.OpusRepacketizerSafeHandle,System.Byte*,System.Int32)">
            <summary>
            Construct a new packet from data previously submitted to the <see cref="T:OpusSharp.Core.SafeHandlers.OpusRepacketizerSafeHandle"/> state via <see cref="M:OpusSharp.Core.NativeOpus.opus_repacketizer_cat(OpusSharp.Core.SafeHandlers.OpusRepacketizerSafeHandle,System.Byte*,System.Int32)"/>.
            </summary>
            <param name="rp">The repacketizer state from which to construct the new packet.</param>
            <param name="data">The buffer in which to store the output packet.</param>
            <param name="maxlen">The maximum number of bytes to store in the output buffer. In order to guarantee success, this should be at least 1277*opus_repacketizer_get_nb_frames(rp). However, 1*opus_repacketizer_get_nb_frames(rp) plus the size of all packet data submitted to the repacketizer since the last call to opus_repacketizer_init() or opus_repacketizer_create() is also sufficient, and possibly much smaller.</param>
            <returns>The total size of the output packet on success, or an <see cref="T:OpusSharp.Core.OpusErrorCodes"/> on failure.</returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_packet_pad(System.Byte*,System.Int32,System.Int32)">
            <summary>
            Pads a given Opus packet to a larger size (possibly changing the TOC sequence).
            </summary>
            <param name="data">The buffer containing the packet to pad.</param>
            <param name="len">The size of the packet. This must be at least 1.</param>
            <param name="new_len">The desired size of the packet after padding. This must be at least as large as len.</param>
            <returns><see cref="T:OpusSharp.Core.OpusErrorCodes"/></returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_packet_unpad(System.Byte*,System.Int32)">
            <summary>
            Remove all padding from a given Opus packet and rewrite the TOC sequence to minimize space usage.
            </summary>
            <param name="data">The buffer containing the packet to strip.</param>
            <param name="len">The size of the packet. This must be at least 1.</param>
            <returns>The new size of the output packet on success, or an <see cref="T:OpusSharp.Core.OpusErrorCodes"/> on failure.</returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_multistream_packet_pad(System.Byte*,System.Int32,System.Int32,System.Int32)">
            <summary>
            Pads a given Opus multi-stream packet to a larger size (possibly changing the TOC sequence).
            </summary>
            <param name="data">The buffer containing the packet to pad.</param>
            <param name="len">The size of the packet. This must be at least 1.</param>
            <param name="new_len">The desired size of the packet after padding. This must be at least 1.</param>
            <param name="nb_streams">The number of streams (not channels) in the packet. This must be at least as large as len.</param>
            <returns><see cref="T:OpusSharp.Core.OpusErrorCodes"/></returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_multistream_packet_unpad(System.Byte*,System.Int32,System.Int32)">
            <summary>
            Remove all padding from a given Opus multi-stream packet and rewrite the TOC sequence to minimize space usage.
            </summary>
            <param name="data">The buffer containing the packet to strip.</param>
            <param name="len">The size of the packet. This must be at least 1.</param>
            <param name="nb_streams">The number of streams (not channels) in the packet. This must be at least 1.</param>
            <returns>The new size of the output packet on success, or an <see cref="T:OpusSharp.Core.OpusErrorCodes"/> on failure.</returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_multistream_encoder_get_size(System.Int32,System.Int32)">
            <summary>
            Gets the size of an <see cref="T:OpusSharp.Core.SafeHandlers.OpusMSEncoderSafeHandle"/> structure.
            </summary>
            <param name="streams">The total number of streams to encode from the input. This must be no more than 255.</param>
            <param name="coupled_streams">Number of coupled (2 channel) streams to encode. This must be no larger than the total number of streams. Additionally, The total number of encoded channels (streams + coupled_streams) must be no more than 255.</param>
            <returns>The size in bytes on success, or a negative error code (see <see cref="T:OpusSharp.Core.OpusErrorCodes"/>) on error.</returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_multistream_surround_encoder_get_size(System.Int32,System.Int32)">
            <summary>
            N.A.
            </summary>
            <param name="channels"></param>
            <param name="mapping_family"></param>
            <returns></returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_multistream_encoder_create(System.Int32,System.Int32,System.Int32,System.Int32,System.Byte*,System.Int32,System.Int32*)">
            <summary>
            Allocates and initializes a <see cref="T:OpusSharp.Core.SafeHandlers.OpusMSEncoderSafeHandle"/> state.
            </summary>
            <param name="Fs">Sampling rate of the input signal (in Hz). This must be one of 8000, 12000, 16000, 24000, or 48000.</param>
            <param name="channels">Number of channels in the input signal. This must be at most 255. It may be greater than the number of coded channels (streams + coupled_streams).</param>
            <param name="streams">The total number of streams to encode from the input. This must be no more than the number of channels.</param>
            <param name="coupled_streams">Number of coupled (2 channel) streams to encode. This must be no larger than the total number of streams. Additionally, The total number of encoded channels (streams + coupled_streams) must be no more than the number of input channels.</param>
            <param name="mapping">Mapping from encoded channels to input channels, as described in Opus Multistream API. As an extra constraint, the multistream encoder does not allow encoding coupled streams for which one channel is unused since this is never a good idea.</param>
            <param name="application">The target encoder application. This must be one of the following: <see cref="F:OpusSharp.Core.OpusPredefinedValues.OPUS_APPLICATION_VOIP"/>, <see cref="F:OpusSharp.Core.OpusPredefinedValues.OPUS_APPLICATION_AUDIO"/> or <see cref="F:OpusSharp.Core.OpusPredefinedValues.OPUS_APPLICATION_RESTRICTED_LOWDELAY"/>.</param>
            <param name="error">Returns <see cref="F:OpusSharp.Core.OpusErrorCodes.OPUS_OK"/> on success, or an error code (see <see cref="T:OpusSharp.Core.OpusErrorCodes"/>) on failure.</param>
            <returns><see cref="T:OpusSharp.Core.SafeHandlers.OpusMSEncoderSafeHandle"/></returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_multistream_surround_encoder_create(System.Int32,System.Int32,System.Int32,System.Int32*,System.Int32*,System.Byte*,System.Int32,System.Int32*)">
            <summary>
            N.A.
            </summary>
            <param name="Fs"></param>
            <param name="channels"></param>
            <param name="mapping_family"></param>
            <param name="streams"></param>
            <param name="coupled_streams"></param>
            <param name="mapping"></param>
            <param name="application"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_multistream_encoder_init(OpusSharp.Core.SafeHandlers.OpusMSEncoderSafeHandle,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte*,System.Int32)">
            <summary>
            Initialize a previously allocated <see cref="T:OpusSharp.Core.SafeHandlers.OpusMSEncoderSafeHandle"/> state.
            </summary>
            <param name="st">Multistream encoder state to initialize.</param>
            <param name="Fs">Sampling rate of the input signal (in Hz). This must be one of 8000, 12000, 16000, 24000, or 48000.</param>
            <param name="channels">Number of channels in the input signal. This must be at most 255. It may be greater than the number of coded channels (streams + coupled_streams).</param>
            <param name="streams">The total number of streams to encode from the input. This must be no more than the number of channels.</param>
            <param name="coupled_streams">Number of coupled (2 channel) streams to encode. This must be no larger than the total number of streams. Additionally, The total number of encoded channels (streams + coupled_streams) must be no more than the number of input channels.</param>
            <param name="mapping">Mapping from encoded channels to input channels, as described in Opus Multistream API. As an extra constraint, the multistream encoder does not allow encoding coupled streams for which one channel is unused since this is never a good idea.</param>
            <param name="application">The target encoder application. This must be one of the following: <see cref="F:OpusSharp.Core.OpusPredefinedValues.OPUS_APPLICATION_VOIP"/>, <see cref="F:OpusSharp.Core.OpusPredefinedValues.OPUS_APPLICATION_AUDIO"/> or <see cref="F:OpusSharp.Core.OpusPredefinedValues.OPUS_APPLICATION_RESTRICTED_LOWDELAY"/>.</param>
            <returns><see cref="F:OpusSharp.Core.OpusErrorCodes.OPUS_OK"/> on success, or an error code (see <see cref="T:OpusSharp.Core.OpusErrorCodes"/>) on failure.</returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_multistream_surround_encoder_init(OpusSharp.Core.SafeHandlers.OpusMSEncoderSafeHandle,System.Int32,System.Int32,System.Int32,System.Int32*,System.Int32*,System.Byte*,System.Int32)">
            <summary>
            N.A.
            </summary>
            <param name="st"></param>
            <param name="Fs"></param>
            <param name="channels"></param>
            <param name="mapping_family"></param>
            <param name="streams"></param>
            <param name="coupled_streams"></param>
            <param name="mapping"></param>
            <param name="application"></param>
            <returns></returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_multistream_encode(OpusSharp.Core.SafeHandlers.OpusMSEncoderSafeHandle,System.Int16*,System.Int32,System.Byte*,System.Int32)">
            <summary>
            Encodes a multistream Opus frame.
            </summary>
            <param name="st">Multistream encoder state.</param>
            <param name="pcm">The input signal as interleaved samples. This must contain frame_size*channels samples.</param>
            <param name="frame_size">Number of samples per channel in the input signal. This must be an Opus frame size for the encoder's sampling rate. For example, at 48 kHz the permitted values are 120, 240, 480, 960, 1920, and 2880. Passing in a duration of less than 10 ms (480 samples at 48 kHz) will prevent the encoder from using the LPC or hybrid modes.</param>
            <param name="data">Output payload. This must contain storage for at least max_data_bytes.</param>
            <param name="max_data_bytes">Size of the allocated memory for the output payload. This may be used to impose an upper limit on the instant bitrate, but should not be used as the only bitrate control. Use <see cref="F:OpusSharp.Core.EncoderCTL.OPUS_SET_BITRATE"/> to control the bitrate.</param>
            <returns>The length of the encoded packet (in bytes) on success or a negative error code (see <see cref="T:OpusSharp.Core.OpusErrorCodes"/>) on failure.</returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_multistream_encode_float(OpusSharp.Core.SafeHandlers.OpusMSEncoderSafeHandle,System.Single*,System.Int32,System.Byte*,System.Int32)">
            <summary>
            Encodes a multistream Opus frame from floating point input.
            </summary>
            <param name="st">Multistream encoder state.</param>
            <param name="pcm">The input signal as interleaved samples with a normal range of +/-1.0. Samples with a range beyond +/-1.0 are supported but will be clipped by decoders using the integer API and should only be used if it is known that the far end supports extended dynamic range. This must contain frame_size*channels samples.</param>
            <param name="frame_size">Number of samples per channel in the input signal. This must be an Opus frame size for the encoder's sampling rate. For example, at 48 kHz the permitted values are 120, 240, 480, 960, 1920, and 2880. Passing in a duration of less than 10 ms (480 samples at 48 kHz) will prevent the encoder from using the LPC or hybrid modes.</param>
            <param name="data">Output payload. This must contain storage for at least max_data_bytes.</param>
            <param name="max_data_bytes">Size of the allocated memory for the output payload. This may be used to impose an upper limit on the instant bitrate, but should not be used as the only bitrate control. Use <see cref="F:OpusSharp.Core.EncoderCTL.OPUS_SET_BITRATE"/> to control the bitrate.</param>
            <returns>The length of the encoded packet (in bytes) on success or a negative error code (see <see cref="T:OpusSharp.Core.OpusErrorCodes"/>) on failure.</returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_multistream_encoder_destroy(System.IntPtr)">
            <summary>
            Frees an <see cref="T:OpusSharp.Core.SafeHandlers.OpusMSEncoderSafeHandle"/> allocated by <see cref="M:OpusSharp.Core.NativeOpus.opus_multistream_encoder_create(System.Int32,System.Int32,System.Int32,System.Int32,System.Byte*,System.Int32,System.Int32*)"/>.
            </summary>
            <param name="st">Multistream encoder state to be freed.</param>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_multistream_encoder_ctl(OpusSharp.Core.SafeHandlers.OpusMSEncoderSafeHandle,System.Int32)">
            <summary>
            Perform a CTL function on a <see cref="T:OpusSharp.Core.SafeHandlers.OpusMSEncoderSafeHandle"/>.
            </summary>
            <param name="st">Multistream encoder state.</param>
            <param name="request">This and all remaining parameters should be replaced by one of the convenience macros in <see cref="T:OpusSharp.Core.GenericCTL"/>, <see cref="T:OpusSharp.Core.EncoderCTL"/>, or <see cref="T:OpusSharp.Core.MultistreamCTL"/> specific encoder and decoder CTLs.</param>
            <returns><see cref="T:OpusSharp.Core.OpusErrorCodes"/></returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_multistream_encoder_ctl(OpusSharp.Core.SafeHandlers.OpusMSEncoderSafeHandle,System.Int32,System.Void*)">
            <summary>
            Perform a CTL function on a <see cref="T:OpusSharp.Core.SafeHandlers.OpusMSEncoderSafeHandle"/>.
            </summary>
            <param name="st">Multistream encoder state.</param>
            <param name="request">This and all remaining parameters should be replaced by one of the convenience macros in <see cref="T:OpusSharp.Core.GenericCTL"/>, <see cref="T:OpusSharp.Core.EncoderCTL"/>, or <see cref="T:OpusSharp.Core.MultistreamCTL"/> specific encoder and decoder CTLs.</param>
            <param name="data">The input/output data.</param>
            <returns><see cref="T:OpusSharp.Core.OpusErrorCodes"/></returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_multistream_encoder_ctl(OpusSharp.Core.SafeHandlers.OpusMSEncoderSafeHandle,System.Int32,System.Void*,System.Void*)">
            <summary>
            Perform a CTL function on a <see cref="T:OpusSharp.Core.SafeHandlers.OpusMSEncoderSafeHandle"/>.
            </summary>
            <param name="st">Multistream encoder state.</param>
            <param name="request">This and all remaining parameters should be replaced by one of the convenience macros in <see cref="T:OpusSharp.Core.GenericCTL"/>, <see cref="T:OpusSharp.Core.EncoderCTL"/>, or <see cref="T:OpusSharp.Core.MultistreamCTL"/> specific encoder and decoder CTLs.</param>
            <param name="data">The input/output data.</param>
            <param name="data2">The input/output data.</param>
            <returns><see cref="T:OpusSharp.Core.OpusErrorCodes"/></returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_multistream_decoder_get_size(System.Int32,System.Int32)">
            <summary>
            Gets the size of an <see cref="T:OpusSharp.Core.SafeHandlers.OpusMSDecoderSafeHandle"/> structure.
            </summary>
            <param name="streams">The total number of streams coded in the input. This must be no more than 255.</param>
            <param name="coupled_streams">Number streams to decode as coupled (2 channel) streams. This must be no larger than the total number of streams. Additionally, The total number of coded channels (streams + coupled_streams) must be no more than 255.</param>
            <returns>The size in bytes on success, or a negative error code (see <see cref="T:OpusSharp.Core.OpusErrorCodes"/>) on error.</returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_multistream_decoder_create(System.Int32,System.Int32,System.Int32,System.Int32,System.Byte*,System.Int32*)">
            <summary>
            Allocates and initializes a <see cref="T:OpusSharp.Core.SafeHandlers.OpusMSDecoderSafeHandle"/> state.
            </summary>
            <param name="Fs">Sampling rate to decode at (in Hz). This must be one of 8000, 12000, 16000, 24000, or 48000.</param>
            <param name="channels">Number of channels to output. This must be at most 255. It may be different from the number of coded channels (streams + coupled_streams).</param>
            <param name="streams">The total number of streams coded in the input. This must be no more than 255.</param>
            <param name="coupled_streams">Number of streams to decode as coupled (2 channel) streams. This must be no larger than the total number of streams. Additionally, The total number of coded channels (streams + coupled_streams) must be no more than 255.</param>
            <param name="mapping">Mapping from coded channels to output channels, as described in Opus Multistream API.</param>
            <param name="error">Returns <see cref="F:OpusSharp.Core.OpusErrorCodes.OPUS_OK"/> on success, or an error code (see <see cref="T:OpusSharp.Core.OpusErrorCodes"/>) on failure.</param>
            <returns><see cref="T:OpusSharp.Core.SafeHandlers.OpusMSDecoderSafeHandle"/></returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_multistream_decoder_init(OpusSharp.Core.SafeHandlers.OpusMSDecoderSafeHandle,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte*)">
            <summary>
            Intialize a previously allocated <see cref="T:OpusSharp.Core.SafeHandlers.OpusMSDecoderSafeHandle"/> state object.
            </summary>
            <param name="st">Multistream encoder state to initialize.</param>
            <param name="Fs">Sampling rate to decode at (in Hz). This must be one of 8000, 12000, 16000, 24000, or 48000.</param>
            <param name="channels">Number of channels to output. This must be at most 255. It may be different from the number of coded channels (streams + coupled_streams).</param>
            <param name="streams">The total number of streams coded in the input. This must be no more than 255.</param>
            <param name="coupled_streams">Number of streams to decode as coupled (2 channel) streams. This must be no larger than the total number of streams. Additionally, The total number of coded channels (streams + coupled_streams) must be no more than 255.</param>
            <param name="mapping">Mapping from coded channels to output channels, as described in Opus Multistream API.</param>
            <returns><see cref="F:OpusSharp.Core.OpusErrorCodes.OPUS_OK"/> on success, or an error code (see <see cref="T:OpusSharp.Core.OpusErrorCodes"/>) on failure.</returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_multistream_decode(OpusSharp.Core.SafeHandlers.OpusMSDecoderSafeHandle,System.Byte*,System.Int32,System.Int16*,System.Int32,System.Int32)">
            <summary>
            Decode a multistream Opus packet.
            </summary>
            <param name="st">Multistream decoder state.</param>
            <param name="data">Input payload. Use a NULL pointer to indicate packet loss.</param>
            <param name="len">Number of bytes in payload.</param>
            <param name="pcm">Output signal, with interleaved samples. This must contain room for frame_size*channels samples.</param>
            <param name="frame_size">The number of samples per channel of available space in pcm. If this is less than the maximum packet duration (120 ms; 5760 for 48kHz), this function will not be capable of decoding some packets. In the case of PLC (data==NULL) or FEC (decode_fec=1), then frame_size needs to be exactly the duration of audio that is missing, otherwise the decoder will not be in the optimal state to decode the next incoming packet. For the PLC and FEC cases, frame_size must be a multiple of 2.5 ms.</param>
            <param name="decode_fec">Flag (0 or 1) to request that any in-band forward error correction data be decoded. If no such data is available, the frame is decoded as if it were lost.</param>
            <returns>Number of samples decoded on success or a negative error code (see <see cref="T:OpusSharp.Core.OpusErrorCodes"/>) on failure.</returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_multistream_decode_float(OpusSharp.Core.SafeHandlers.OpusMSDecoderSafeHandle,System.Byte*,System.Int32,System.Single*,System.Int32,System.Int32)">
            <summary>
            Decode a multistream Opus packet with floating point output.
            </summary>
            <param name="st">Multistream decoder state.</param>
            <param name="data">Input payload. Use a NULL pointer to indicate packet loss.</param>
            <param name="len">Number of bytes in payload.</param>
            <param name="pcm">Output signal, with interleaved samples. This must contain room for frame_size*channels samples.</param>
            <param name="frame_size">The number of samples per channel of available space in pcm. If this is less than the maximum packet duration (120 ms; 5760 for 48kHz), this function will not be capable of decoding some packets. In the case of PLC (data==NULL) or FEC (decode_fec=1), then frame_size needs to be exactly the duration of audio that is missing, otherwise the decoder will not be in the optimal state to decode the next incoming packet. For the PLC and FEC cases, frame_size must be a multiple of 2.5 ms.</param>
            <param name="decode_fec">Flag (0 or 1) to request that any in-band forward error correction data be decoded. If no such data is available, the frame is decoded as if it were lost.</param>
            <returns>Number of samples decoded on success or a negative error code (see <see cref="T:OpusSharp.Core.OpusErrorCodes"/>) on failure.</returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_multistream_decoder_ctl(OpusSharp.Core.SafeHandlers.OpusMSDecoderSafeHandle,System.Int32)">
            <summary>
            Perform a CTL function on a <see cref="T:OpusSharp.Core.SafeHandlers.OpusMSEncoderSafeHandle"/>.
            </summary>
            <param name="st">Multistream decoder state.</param>
            <param name="request">This and all remaining parameters should be replaced by one of the convenience macros in <see cref="T:OpusSharp.Core.GenericCTL"/>, <see cref="T:OpusSharp.Core.DecoderCTL"/>, or <see cref="T:OpusSharp.Core.MultistreamCTL"/> specific encoder and decoder CTLs.</param>
            <returns><see cref="T:OpusSharp.Core.OpusErrorCodes"/></returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_multistream_decoder_ctl(OpusSharp.Core.SafeHandlers.OpusMSDecoderSafeHandle,System.Int32,System.Void*)">
            <summary>
            Perform a CTL function on a <see cref="T:OpusSharp.Core.SafeHandlers.OpusMSEncoderSafeHandle"/>.
            </summary>
            <param name="st">Multistream decoder state.</param>
            <param name="request">This and all remaining parameters should be replaced by one of the convenience macros in <see cref="T:OpusSharp.Core.GenericCTL"/>, <see cref="T:OpusSharp.Core.DecoderCTL"/>, or <see cref="T:OpusSharp.Core.MultistreamCTL"/> specific encoder and decoder CTLs.</param>
            <param name="data">The input/output data.</param>
            <returns><see cref="T:OpusSharp.Core.OpusErrorCodes"/></returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_multistream_decoder_ctl(OpusSharp.Core.SafeHandlers.OpusMSDecoderSafeHandle,System.Int32,System.Void*,System.Void*)">
            <summary>
            Perform a CTL function on a <see cref="T:OpusSharp.Core.SafeHandlers.OpusMSEncoderSafeHandle"/>.
            </summary>
            <param name="st">Multistream decoder state.</param>
            <param name="request">This and all remaining parameters should be replaced by one of the convenience macros in <see cref="T:OpusSharp.Core.GenericCTL"/>, <see cref="T:OpusSharp.Core.DecoderCTL"/>, or <see cref="T:OpusSharp.Core.MultistreamCTL"/> specific encoder and decoder CTLs.</param>
            <param name="data">The input/output data.</param>
            <param name="data2">The input/output data.</param>
            <returns><see cref="T:OpusSharp.Core.OpusErrorCodes"/></returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_multistream_decoder_destroy(System.IntPtr)">
            <summary>
            Frees an <see cref="T:OpusSharp.Core.SafeHandlers.OpusMSDecoderSafeHandle"/> allocated by <see cref="M:OpusSharp.Core.NativeOpus.opus_multistream_decoder_create(System.Int32,System.Int32,System.Int32,System.Int32,System.Byte*,System.Int32*)"/>.
            </summary>
            <param name="st">Multistream decoder state to be freed.</param>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_get_version_string">
            <summary>
            Gets the libopus version string.
            </summary>
            <returns>Version string</returns>
        </member>
        <member name="M:OpusSharp.Core.NativeOpus.opus_strerror(System.Int32)">
            <summary>
            Converts an opus error code into a human readable string.
            </summary>
            <param name="error">Error number.</param>
            <returns>Error string.</returns>
        </member>
        <member name="T:OpusSharp.Core.OpusDecoder">
            <summary>
            An opus decoder.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.OpusDecoder._handler">
            <summary>
            Direct safe handle for the <see cref="T:OpusSharp.Core.OpusDecoder"/>. IT IS NOT RECOMMENDED TO CLOSE THE HANDLE DIRECTLY! Instead use <see cref="M:OpusSharp.Core.OpusDecoder.Dispose(System.Boolean)"/> to dispose the handle and object safely.
            </summary>
        </member>
        <member name="M:OpusSharp.Core.OpusDecoder.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new opus decoder.
            </summary>
            <param name="sample_rate">The sample rate, this must be one of 8000, 12000, 16000, 24000, or 48000.</param>
            <param name="channels">Number of channels, this must be 1 or 2.</param>
            <exception cref="T:OpusSharp.Core.OpusException" />
        </member>
        <member name="M:OpusSharp.Core.OpusDecoder.Decode(System.Span{System.Byte},System.Int32,System.Span{System.Byte},System.Int32,System.Boolean)">
            <summary>
            Decodes an opus encoded frame.
            </summary>
            <param name="input">Input payload. Use null to indicate packet loss</param>
            <param name="length">Number of bytes in payload.</param>
            <param name="output">Output signal (interleaved if 2 channels). length is frame_size*channels*sizeof(short).</param>
            <param name="frame_size">Number of samples per channel of available space in pcm. If this is less than the maximum packet duration (120ms; 5760 for 48kHz), this function will not be capable of decoding some packets. In the case of PLC (data==NULL) or FEC (decode_fec=true), then frame_size needs to be exactly the duration of audio that is missing, otherwise the decoder will not be in the optimal state to decode the next incoming packet. For the PLC and FEC cases, frame_size must be a multiple of 2.5 ms.</param>
            <param name="decode_fec">Request that any in-band forward error correction data be decoded. If no such data is available, the frame is decoded as if it were lost.</param>
            <returns>Number of decoded samples or <see cref="T:OpusSharp.Core.OpusErrorCodes"/>.</returns>
        </member>
        <member name="M:OpusSharp.Core.OpusDecoder.Decode(System.Span{System.Byte},System.Int32,System.Span{System.Int16},System.Int32,System.Boolean)">
            <summary>
            Decodes an opus encoded frame.
            </summary>
            <param name="input">Input payload. Use null to indicate packet loss</param>
            <param name="length">Number of bytes in payload.</param>
            <param name="output">Output signal (interleaved if 2 channels). length is frame_size*channels.</param>
            <param name="frame_size">Number of samples per channel of available space in pcm. If this is less than the maximum packet duration (120ms; 5760 for 48kHz), this function will not be capable of decoding some packets. In the case of PLC (data==NULL) or FEC (decode_fec=true), then frame_size needs to be exactly the duration of audio that is missing, otherwise the decoder will not be in the optimal state to decode the next incoming packet. For the PLC and FEC cases, frame_size must be a multiple of 2.5 ms.</param>
            <param name="decode_fec">Request that any in-band forward error correction data be decoded. If no such data is available, the frame is decoded as if it were lost.</param>
            <returns>Number of decoded samples or <see cref="T:OpusSharp.Core.OpusErrorCodes"/>.</returns>
        </member>
        <member name="M:OpusSharp.Core.OpusDecoder.Decode(System.Span{System.Byte},System.Int32,System.Span{System.Single},System.Int32,System.Boolean)">
            <summary>
            Decodes an opus encoded frame.
            </summary>
            <param name="input">Input payload. Use null to indicate packet loss</param>
            <param name="length">Number of bytes in payload.</param>
            <param name="output">Output signal (interleaved if 2 channels). length is (frame_size*channels)/2. Note: I don't know if this is correct.</param>
            <param name="frame_size">Number of samples per channel of available space in pcm. If this is less than the maximum packet duration (120ms; 5760 for 48kHz), this function will not be capable of decoding some packets. In the case of PLC (data==NULL) or FEC (decode_fec=true), then frame_size needs to be exactly the duration of audio that is missing, otherwise the decoder will not be in the optimal state to decode the next incoming packet. For the PLC and FEC cases, frame_size must be a multiple of 2.5 ms.</param>
            <param name="decode_fec">Request that any in-band forward error correction data be decoded. If no such data is available, the frame is decoded as if it were lost.</param>
            <returns>Number of decoded samples or <see cref="T:OpusSharp.Core.OpusErrorCodes"/>.</returns>
        </member>
        <member name="M:OpusSharp.Core.OpusDecoder.Decode(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Decodes an opus encoded frame.
            </summary>
            <param name="input">Input payload. Use null to indicate packet loss</param>
            <param name="length">Number of bytes in payload.</param>
            <param name="output">Output signal (interleaved if 2 channels). length is frame_size*channels</param>
            <param name="frame_size">Number of samples per channel of available space in pcm. If this is less than the maximum packet duration (120ms; 5760 for 48kHz), this function will not be capable of decoding some packets. In the case of PLC (data==NULL) or FEC (decode_fec=true), then frame_size needs to be exactly the duration of audio that is missing, otherwise the decoder will not be in the optimal state to decode the next incoming packet. For the PLC and FEC cases, frame_size must be a multiple of 2.5 ms.</param>
            <param name="decode_fec">Request that any in-band forward error correction data be decoded. If no such data is available, the frame is decoded as if it were lost.</param>
            <returns>Number of decoded samples or <see cref="T:OpusSharp.Core.OpusErrorCodes"/>.</returns>
        </member>
        <member name="M:OpusSharp.Core.OpusDecoder.Decode(System.Byte[],System.Int32,System.Int16[],System.Int32,System.Boolean)">
            <summary>
            Decodes an opus encoded frame.
            </summary>
            <param name="input">Input payload. Use null to indicate packet loss</param>
            <param name="length">Number of bytes in payload.</param>
            <param name="output">Output signal (interleaved if 2 channels). length is frame_size*channels*sizeof(short)</param>
            <param name="frame_size">Number of samples per channel of available space in pcm. If this is less than the maximum packet duration (120ms; 5760 for 48kHz), this function will not be capable of decoding some packets. In the case of PLC (data==NULL) or FEC (decode_fec=true), then frame_size needs to be exactly the duration of audio that is missing, otherwise the decoder will not be in the optimal state to decode the next incoming packet. For the PLC and FEC cases, frame_size must be a multiple of 2.5 ms.</param>
            <param name="decode_fec">Request that any in-band forward error correction data be decoded. If no such data is available, the frame is decoded as if it were lost.</param>
            <returns>Number of decoded samples or <see cref="T:OpusSharp.Core.OpusErrorCodes"/>.</returns>
        </member>
        <member name="M:OpusSharp.Core.OpusDecoder.Decode(System.Byte[],System.Int32,System.Single[],System.Int32,System.Boolean)">
            <summary>
            Decodes an opus encoded frame.
            </summary>
            <param name="input">Input payload. Use null to indicate packet loss</param>
            <param name="length">Number of bytes in payload.</param>
            <param name="output">Output signal (interleaved if 2 channels). length is frame_size*channels*sizeof(float)</param>
            <param name="frame_size">Number of samples per channel of available space in pcm. If this is less than the maximum packet duration (120ms; 5760 for 48kHz), this function will not be capable of decoding some packets. In the case of PLC (data==NULL) or FEC (decode_fec=true), then frame_size needs to be exactly the duration of audio that is missing, otherwise the decoder will not be in the optimal state to decode the next incoming packet. For the PLC and FEC cases, frame_size must be a multiple of 2.5 ms.</param>
            <param name="decode_fec">Request that any in-band forward error correction data be decoded. If no such data is available, the frame is decoded as if it were lost.</param>
            <returns>Number of decoded samples or <see cref="T:OpusSharp.Core.OpusErrorCodes"/>.</returns>
        </member>
        <member name="M:OpusSharp.Core.OpusDecoder.Ctl``1(OpusSharp.Core.DecoderCTL,``0@)">
            <summary>
            Performs a ctl request.
            </summary>
            <typeparam name="T">The type you want to input/output.</typeparam>
            <param name="request">The request you want to specify.</param>
            <param name="value">The input/output value.</param>
            <returns>The result code of the request. See <see cref="T:OpusSharp.Core.OpusErrorCodes"/>.</returns>
            <exception cref="T:OpusSharp.Core.OpusException" />
            <exception cref="T:System.ObjectDisposedException" />
        </member>
        <member name="M:OpusSharp.Core.OpusDecoder.Ctl(OpusSharp.Core.GenericCTL)">
            <summary>
            Performs a ctl request.
            </summary>
            <param name="request">The request you want to specify.</param>
            <returns>The result code of the request. See <see cref="T:OpusSharp.Core.OpusErrorCodes"/>.</returns>
            <exception cref="T:OpusSharp.Core.OpusException" />
            <exception cref="T:System.ObjectDisposedException" />
        </member>
        <member name="M:OpusSharp.Core.OpusDecoder.Ctl``1(OpusSharp.Core.GenericCTL,``0@)">
            <summary>
            Performs a ctl request.
            </summary>
            <typeparam name="T">The type you want to input/output.</typeparam>
            <param name="request">The request you want to specify.</param>
            <param name="value">The input/output value.</param>
            <returns>The result code of the request. See <see cref="T:OpusSharp.Core.OpusErrorCodes"/>.</returns>
            <exception cref="T:OpusSharp.Core.OpusException" />
            <exception cref="T:System.ObjectDisposedException" />
        </member>
        <member name="M:OpusSharp.Core.OpusDecoder.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:OpusSharp.Core.OpusDecoder.Dispose(System.Boolean)">
            <summary>
            Dispose logic.
            </summary>
            <param name="disposing">Set to true if fully disposing.</param>
        </member>
        <member name="M:OpusSharp.Core.OpusDecoder.ThrowIfDisposed">
            <summary>
            Throws an exception if this object is disposed or the handler is closed.
            </summary>
            <exception cref="T:System.ObjectDisposedException" />
        </member>
        <member name="M:OpusSharp.Core.OpusDecoder.CheckError(System.Int32)">
            <summary>
            Checks if there is an opus error and throws if the error is a negative value.
            </summary>
            <param name="error">The error code to input.</param>
            <exception cref="T:OpusSharp.Core.OpusException"></exception>
        </member>
        <member name="T:OpusSharp.Core.OpusEncoder">
            <summary>
            An opus encoder.
            </summary>
        </member>
        <member name="F:OpusSharp.Core.OpusEncoder._handler">
            <summary>
            Direct safe handle for the <see cref="T:OpusSharp.Core.OpusEncoder"/>. IT IS NOT RECOMMENDED TO CLOSE THE HANDLE DIRECTLY! Instead use <see cref="M:OpusSharp.Core.OpusEncoder.Dispose(System.Boolean)"/> to dispose the handle and object safely.
            </summary>
        </member>
        <member name="M:OpusSharp.Core.OpusEncoder.#ctor(System.Int32,System.Int32,OpusSharp.Core.OpusPredefinedValues)">
            <summary>
            Creates a new opus encoder.
            </summary>
            <param name="sample_rate">The sample rate, this must be one of 8000, 12000, 16000, 24000, or 48000.</param>
            <param name="channels">Number of channels, this must be 1 or 2.</param>
            <param name="application">Coding mode (one of <see cref="F:OpusSharp.Core.OpusPredefinedValues.OPUS_APPLICATION_VOIP"/>, <see cref="F:OpusSharp.Core.OpusPredefinedValues.OPUS_APPLICATION_AUDIO"/> or <see cref="F:OpusSharp.Core.OpusPredefinedValues.OPUS_APPLICATION_RESTRICTED_LOWDELAY"/></param>
            <exception cref="T:OpusSharp.Core.OpusException" />
        </member>
        <member name="M:OpusSharp.Core.OpusEncoder.Encode(System.Span{System.Byte},System.Int32,System.Span{System.Byte},System.Int32)">
            <summary>
            Encodes a pcm frame.
            </summary>
            <param name="input">Input signal (interleaved if 2 channels). length is frame_size*channels.</param>
            <param name="frame_size">The frame size of the pcm data. This must be an Opus frame size for the encoder's sampling rate. For example, at 48 kHz the permitted values are 120, 240, 480, 960, 1920, and 2880. Passing in a duration of less than 10 ms (480 samples at 48 kHz) will prevent the encoder from using the LPC or hybrid modes.</param>
            <param name="output">Output payload. This must contain storage for at least max_data_bytes.</param>
            <param name="max_data_bytes">Size of the allocated memory for the output payload. This may be used to impose an upper limit on the instant bitrate, but should not be used as the only bitrate control. Use <see cref="F:OpusSharp.Core.EncoderCTL.OPUS_SET_BITRATE"/> to control the bitrate.</param>
            <returns>The length of the encoded packet (in bytes).</returns>
            <exception cref="T:OpusSharp.Core.OpusException" />
            <exception cref="T:System.ObjectDisposedException" />
        </member>
        <member name="M:OpusSharp.Core.OpusEncoder.Encode(System.Span{System.Int16},System.Int32,System.Span{System.Byte},System.Int32)">
            <summary>
            Encodes a pcm frame.
            </summary>
            <param name="input">Input signal (interleaved if 2 channels). length is frame_size*channels*sizeof(short).</param>
            <param name="frame_size">The frame size of the pcm data. This must be an Opus frame size for the encoder's sampling rate. For example, at 48 kHz the permitted values are 120, 240, 480, 960, 1920, and 2880. Passing in a duration of less than 10 ms (480 samples at 48 kHz) will prevent the encoder from using the LPC or hybrid modes.</param>
            <param name="output">Output payload. This must contain storage for at least max_data_bytes.</param>
            <param name="max_data_bytes">Size of the allocated memory for the output payload. This may be used to impose an upper limit on the instant bitrate, but should not be used as the only bitrate control. Use <see cref="F:OpusSharp.Core.EncoderCTL.OPUS_SET_BITRATE"/> to control the bitrate.</param>
            <returns>The length of the encoded packet (in bytes).</returns>
            <exception cref="T:OpusSharp.Core.OpusException" />
            <exception cref="T:System.ObjectDisposedException" />
        </member>
        <member name="M:OpusSharp.Core.OpusEncoder.Encode(System.Span{System.Single},System.Int32,System.Span{System.Byte},System.Int32)">
            <summary>
            Encodes a floating point pcm frame.
            </summary>
            <param name="input">Input signal (interleaved if 2 channels). length is frame_size*channels*sizeof(float).</param>
            <param name="frame_size">The frame size of the pcm data. This must be an Opus frame size for the encoder's sampling rate. For example, at 48 kHz the permitted values are 120, 240, 480, 960, 1920, and 2880. Passing in a duration of less than 10 ms (480 samples at 48 kHz) will prevent the encoder from using the LPC or hybrid modes.</param>
            <param name="output">Output payload. This must contain storage for at least max_data_bytes.</param>
            <param name="max_data_bytes">Size of the allocated memory for the output payload. This may be used to impose an upper limit on the instant bitrate, but should not be used as the only bitrate control. Use <see cref="F:OpusSharp.Core.EncoderCTL.OPUS_SET_BITRATE"/> to control the bitrate.</param>
            <returns>The length of the encoded packet (in bytes).</returns>
            <exception cref="T:OpusSharp.Core.OpusException" />
            <exception cref="T:System.ObjectDisposedException" />
        </member>
        <member name="M:OpusSharp.Core.OpusEncoder.Encode(System.Byte[],System.Int32,System.Byte[],System.Int32)">
            <summary>
            Encodes a pcm frame.
            </summary>
            <param name="input">Input signal (interleaved if 2 channels). length is frame_size*channels.</param>
            <param name="frame_size">The frame size of the pcm data. This must be an Opus frame size for the encoder's sampling rate. For example, at 48 kHz the permitted values are 120, 240, 480, 960, 1920, and 2880. Passing in a duration of less than 10 ms (480 samples at 48 kHz) will prevent the encoder from using the LPC or hybrid modes.</param>
            <param name="output">Output payload. This must contain storage for at least max_data_bytes.</param>
            <param name="max_data_bytes">Size of the allocated memory for the output payload. This may be used to impose an upper limit on the instant bitrate, but should not be used as the only bitrate control. Use <see cref="F:OpusSharp.Core.EncoderCTL.OPUS_SET_BITRATE"/> to control the bitrate.</param>
            <returns>The length of the encoded packet (in bytes).</returns>
            <exception cref="T:OpusSharp.Core.OpusException" />
            <exception cref="T:System.ObjectDisposedException" />
        </member>
        <member name="M:OpusSharp.Core.OpusEncoder.Encode(System.Int16[],System.Int32,System.Byte[],System.Int32)">
            <summary>
            Encodes a pcm frame.
            </summary>
            <param name="input">Input signal (interleaved if 2 channels). length is frame_size*channels*sizeof(short).</param>
            <param name="frame_size">The frame size of the pcm data. This must be an Opus frame size for the encoder's sampling rate. For example, at 48 kHz the permitted values are 120, 240, 480, 960, 1920, and 2880. Passing in a duration of less than 10 ms (480 samples at 48 kHz) will prevent the encoder from using the LPC or hybrid modes.</param>
            <param name="output">Output payload. This must contain storage for at least max_data_bytes.</param>
            <param name="max_data_bytes">Size of the allocated memory for the output payload. This may be used to impose an upper limit on the instant bitrate, but should not be used as the only bitrate control. Use <see cref="F:OpusSharp.Core.EncoderCTL.OPUS_SET_BITRATE"/> to control the bitrate.</param>
            <returns>The length of the encoded packet (in bytes).</returns>
            <exception cref="T:OpusSharp.Core.OpusException" />
            <exception cref="T:System.ObjectDisposedException" />
        </member>
        <member name="M:OpusSharp.Core.OpusEncoder.Encode(System.Single[],System.Int32,System.Byte[],System.Int32)">
            <summary>
            Encodes a floating point pcm frame.
            </summary>
            <param name="input">Input signal (interleaved if 2 channels). length is frame_size*channels*sizeof(float).</param>
            <param name="frame_size">The frame size of the pcm data. This must be an Opus frame size for the encoder's sampling rate. For example, at 48 kHz the permitted values are 120, 240, 480, 960, 1920, and 2880. Passing in a duration of less than 10 ms (480 samples at 48 kHz) will prevent the encoder from using the LPC or hybrid modes.</param>
            <param name="output">Output payload. This must contain storage for at least max_data_bytes.</param>
            <param name="max_data_bytes">Size of the allocated memory for the output payload. This may be used to impose an upper limit on the instant bitrate, but should not be used as the only bitrate control. Use <see cref="F:OpusSharp.Core.EncoderCTL.OPUS_SET_BITRATE"/> to control the bitrate.</param>
            <returns>The length of the encoded packet (in bytes).</returns>
            <exception cref="T:OpusSharp.Core.OpusException" />
            <exception cref="T:System.ObjectDisposedException" />
        </member>
        <member name="M:OpusSharp.Core.OpusEncoder.Ctl``1(OpusSharp.Core.EncoderCTL,``0@)">
            <summary>
            Performs a ctl request.
            </summary>
            <typeparam name="T">The type you want to input/output.</typeparam>
            <param name="request">The request you want to specify.</param>
            <param name="value">The input/output value.</param>
            <returns>The result code of the request. See <see cref="T:OpusSharp.Core.OpusErrorCodes"/>.</returns>
            <exception cref="T:OpusSharp.Core.OpusException" />
            <exception cref="T:System.ObjectDisposedException" />
        </member>
        <member name="M:OpusSharp.Core.OpusEncoder.Ctl``2(OpusSharp.Core.EncoderCTL,``0@,``1@)">
            <summary>
            Performs a ctl request.
            </summary>
            <typeparam name="T">The type you want to input/output.</typeparam>        
            <typeparam name="T2">The second type you want to input/output.</typeparam>
            <param name="request">The request you want to specify.</param>
            <param name="value">The input/output value.</param>
            <param name="value2">The second input/output value.</param>
            <returns>The result code of the request. See <see cref="T:OpusSharp.Core.OpusErrorCodes"/>.</returns>
            <exception cref="T:OpusSharp.Core.OpusException" />
            <exception cref="T:System.ObjectDisposedException" />
        </member>
        <member name="M:OpusSharp.Core.OpusEncoder.Ctl(OpusSharp.Core.GenericCTL)">
            <summary>
            Performs a ctl request.
            </summary>
            <param name="request">The request you want to specify.</param>
            <returns>The result code of the request. See <see cref="T:OpusSharp.Core.OpusErrorCodes"/>.</returns>
            <exception cref="T:OpusSharp.Core.OpusException" />
            <exception cref="T:System.ObjectDisposedException" />
        </member>
        <member name="M:OpusSharp.Core.OpusEncoder.Ctl``1(OpusSharp.Core.GenericCTL,``0@)">
            <summary>
            Performs a ctl request.
            </summary>
            <typeparam name="T">The type you want to input/output.</typeparam>
            <param name="request">The request you want to specify.</param>
            <param name="value">The input/output value.</param>
            <returns>The result code of the request. See <see cref="T:OpusSharp.Core.OpusErrorCodes"/>.</returns>
            <exception cref="T:OpusSharp.Core.OpusException" />
            <exception cref="T:System.ObjectDisposedException" />
        </member>
        <member name="M:OpusSharp.Core.OpusEncoder.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:OpusSharp.Core.OpusEncoder.Dispose(System.Boolean)">
            <summary>
            Dispose logic.
            </summary>
            <param name="disposing">Set to true if fully disposing.</param>
        </member>
        <member name="M:OpusSharp.Core.OpusEncoder.ThrowIfDisposed">
            <summary>
            Throws an exception if this object is disposed or the handler is closed.
            </summary>
            <exception cref="T:System.ObjectDisposedException" />
        </member>
        <member name="M:OpusSharp.Core.OpusEncoder.CheckError(System.Int32)">
            <summary>
            Checks if there is an opus error and throws if the error is a negative value.
            </summary>
            <param name="error">The error code to input.</param>
            <exception cref="T:OpusSharp.Core.OpusException"></exception>
        </member>
        <member name="T:OpusSharp.Core.OpusException">
            <summary>
            An opus exception.
            </summary>
        </member>
        <member name="M:OpusSharp.Core.OpusException.#ctor">
            <summary>
            Constructs an opus exception.
            </summary>
        </member>
        <member name="M:OpusSharp.Core.OpusException.#ctor(System.String)">
            <summary>
            Constructs an opus exception.
            </summary>
            <param name="message">The message of the exception.</param>
        </member>
        <member name="M:OpusSharp.Core.OpusException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs an opus exception.
            </summary>
            <param name="message">The message of the exception.</param>
            <param name="innerException">The root exception.</param>
        </member>
        <member name="T:OpusSharp.Core.OpusInfo">
            <summary>
            Provides information about the opus DLL.
            </summary>
        </member>
        <member name="M:OpusSharp.Core.OpusInfo.Version">
            <summary>
            Gets the libopus version string.
            </summary>
            <returns>Version string.</returns>
        </member>
        <member name="M:OpusSharp.Core.OpusInfo.StringError(System.Int32)">
            <summary>
            Converts an opus error code into a human readable string.
            </summary>
            <param name="error">Error number.</param>
            <returns>Error string.</returns>
        </member>
        <member name="T:OpusSharp.Core.SafeHandlers.OpusDecoderSafeHandle">
            <summary>
            Managed wrapper over the OpusDecoder state.
            </summary>
        </member>
        <member name="M:OpusSharp.Core.SafeHandlers.OpusDecoderSafeHandle.#ctor">
            <summary>
            Creates a new <see cref="T:OpusSharp.Core.SafeHandlers.OpusDecoderSafeHandle"/>.
            </summary>
        </member>
        <member name="P:OpusSharp.Core.SafeHandlers.OpusDecoderSafeHandle.IsInvalid">
            <inheritdoc/>
        </member>
        <member name="M:OpusSharp.Core.SafeHandlers.OpusDecoderSafeHandle.ReleaseHandle">
            <inheritdoc/>
        </member>
        <member name="T:OpusSharp.Core.SafeHandlers.OpusDREDDecoderSafeHandle">
            <summary>
            Managed wrapper over the OpusDREDDecoder state.
            </summary>
        </member>
        <member name="M:OpusSharp.Core.SafeHandlers.OpusDREDDecoderSafeHandle.#ctor">
            <summary>
            Creates a new <see cref="T:OpusSharp.Core.SafeHandlers.OpusDecoderSafeHandle"/>.
            </summary>
        </member>
        <member name="P:OpusSharp.Core.SafeHandlers.OpusDREDDecoderSafeHandle.IsInvalid">
            <inheritdoc/>
        </member>
        <member name="M:OpusSharp.Core.SafeHandlers.OpusDREDDecoderSafeHandle.ReleaseHandle">
            <inheritdoc/>
        </member>
        <member name="T:OpusSharp.Core.SafeHandlers.OpusDREDSafeHandle">
            <summary>
            Managed wrapper over the OpusDRED state.
            </summary>
        </member>
        <member name="M:OpusSharp.Core.SafeHandlers.OpusDREDSafeHandle.#ctor">
            <summary>
            Creates a new <see cref="T:OpusSharp.Core.SafeHandlers.OpusDREDDecoderSafeHandle"/>.
            </summary>
        </member>
        <member name="P:OpusSharp.Core.SafeHandlers.OpusDREDSafeHandle.IsInvalid">
            <inheritdoc/>
        </member>
        <member name="M:OpusSharp.Core.SafeHandlers.OpusDREDSafeHandle.ReleaseHandle">
            <inheritdoc/>
        </member>
        <member name="T:OpusSharp.Core.SafeHandlers.OpusEncoderSafeHandle">
            <summary>
            Managed wrapper over the OpusEncoder state.
            </summary>
        </member>
        <member name="M:OpusSharp.Core.SafeHandlers.OpusEncoderSafeHandle.#ctor">
            <summary>
            Creates a new <see cref="T:OpusSharp.Core.SafeHandlers.OpusEncoderSafeHandle"/>.
            </summary>
        </member>
        <member name="P:OpusSharp.Core.SafeHandlers.OpusEncoderSafeHandle.IsInvalid">
            <inheritdoc/>
        </member>
        <member name="M:OpusSharp.Core.SafeHandlers.OpusEncoderSafeHandle.ReleaseHandle">
            <inheritdoc/>
        </member>
        <member name="T:OpusSharp.Core.SafeHandlers.OpusMSDecoderSafeHandle">
            <summary>
            Managed wrapper over the OpusMultistreamDecoder state.
            </summary>
        </member>
        <member name="M:OpusSharp.Core.SafeHandlers.OpusMSDecoderSafeHandle.#ctor">
            <summary>
            Creates a new <see cref="T:OpusSharp.Core.SafeHandlers.OpusMSDecoderSafeHandle"/>.
            </summary>
        </member>
        <member name="P:OpusSharp.Core.SafeHandlers.OpusMSDecoderSafeHandle.IsInvalid">
            <inheritdoc/>
        </member>
        <member name="M:OpusSharp.Core.SafeHandlers.OpusMSDecoderSafeHandle.ReleaseHandle">
            <inheritdoc/>
        </member>
        <member name="T:OpusSharp.Core.SafeHandlers.OpusMSEncoderSafeHandle">
            <summary>
            Managed wrapper over the OpusMultistreamEncoder state.
            </summary>
        </member>
        <member name="M:OpusSharp.Core.SafeHandlers.OpusMSEncoderSafeHandle.#ctor">
            <summary>
            Creates a new <see cref="T:OpusSharp.Core.SafeHandlers.OpusMSEncoderSafeHandle"/>.
            </summary>
        </member>
        <member name="P:OpusSharp.Core.SafeHandlers.OpusMSEncoderSafeHandle.IsInvalid">
            <inheritdoc/>
        </member>
        <member name="M:OpusSharp.Core.SafeHandlers.OpusMSEncoderSafeHandle.ReleaseHandle">
            <inheritdoc/>
        </member>
        <member name="T:OpusSharp.Core.SafeHandlers.OpusRepacketizerSafeHandle">
            <summary>
            Managed wrapper over the OpusRepacketizer state.
            </summary>
        </member>
        <member name="M:OpusSharp.Core.SafeHandlers.OpusRepacketizerSafeHandle.#ctor">
            <summary>
            Creates a new <see cref="T:OpusSharp.Core.SafeHandlers.OpusRepacketizerSafeHandle"/>.
            </summary>
        </member>
        <member name="P:OpusSharp.Core.SafeHandlers.OpusRepacketizerSafeHandle.IsInvalid">
            <inheritdoc/>
        </member>
        <member name="M:OpusSharp.Core.SafeHandlers.OpusRepacketizerSafeHandle.ReleaseHandle">
            <inheritdoc/>
        </member>
    </members>
</doc>
